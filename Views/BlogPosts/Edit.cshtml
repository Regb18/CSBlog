@model CSBlog.Models.BlogPost

@using CSBlog.Enums;
@using CSBlog.Services.Interfaces

@*only need the representation of the methods, lighter than the service*@
@inject IImageService _ImageService
@inject IBlogPostService _BlogPostService
@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>BlogPost</h4>
<hr />

<main class="container mt-5">
    <form asp-action="Edit" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="Created" />
        <input type="hidden" asp-for="ImageData" />
        <input type="hidden" asp-for="ImageType" />
        <input type="hidden" asp-for="Slug" />
        <input type="hidden" asp-for="IsDeleted" />
        <div class="row">
            <div class="col-12 col-lg-4">
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Abstract" class="control-label"></label>
                    <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
                    <span asp-validation-for="Abstract" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CategoryId" class="control-label">Category</label>
                    <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryList"></select>
                </div>
                <div class="form-group">
                    <label asp-for="ImageFile" class="control-label">Blog Post Image</label>
                    <img class="img-fluid border rounded-3 m-2" style="max-height: 250px;" src="@_ImageService.ConvertByteArrayToFile(Model.ImageData!, Model.ImageType!,(int)DefaultImage.BlogPostImage)" id="blogImage">
                    <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                           onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
                </div>
            </div>
            <div class="col-12 col-lg-8">
                <div class="ck-editor__editable_inline form-group">
                    <label asp-for="Content" class="control-label"></label>
                    <textarea asp-for="Content" class="editor form-control"></textarea>
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group" id="tagContainer">
                    <label asp-for="Tags"></label>
                    <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
                </div>
                <div class="tagcloud axil-single-widget mt-2" style="display: none;">
                    @foreach (Tag tag in await _BlogPostService.GetTagsAsync())
                    {
                        <a onclick="addTag(this)">@tag.Name</a>
                    }
                </div>
            </div>
        </div>
        <div class="form-group d-flex justify-content-end mt-3">
            <div class="form-group form-check d-flex my-auto">
                <label class="form-check-label my-auto me-4">
                    <input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
                </label>
            </div>
            <div class="form-group form-check d-flex my-auto">
                <label class="form-check-label my-auto me-4">
                    <input class="form-check-input me-3" asp-for="IsDeleted" />&nbsp; Delete?
                </label>
            </div>
            <input type="submit" value="Edit" class="btn btn-primary" />
        </div>
    </form>
    <div class="mt-5">
        <a asp-action="AdminPage">Back to List</a>
    </div>
</main>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/ckeditor5/build/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('.editor'), {
                licenseKey: '',
            })
            .then(editor => {
                window.editor = editor;
            })
            .catch(error => {
                console.error('Oops, something went wrong!');
                console.error('Please, report the following error on https://github.com/ckeditor/ckeditor5/issues with the build id and the error stack trace:');
                console.warn('Build id: xx09iayzufkn-lkt434h3lx2z');
                console.error(error);
            });
    </script>

    <script>
        function addTag(el) {
            let input = document.getElementById("tagInput");

            if (el.classList.contains('disabledTag')) {
                input.focus();
                return;
            }

            let tagName = el.textContent + ', ';

            let currentTags = input.value.split(",");

            // remove partially entered tag
            currentTags.pop()
            // add the full name of the clicked tag
            currentTags.push(tagName);

            // reduce - takes an array of strings and reduces it down to one string
            input.value = currentTags.reduce((inputString, currentString) => inputString + ', ' + currentString.trim());

            el.classList.add('disabledTag');

            input.focus();
        }

        // override the jQuery ":contains" selector to make it case insensitive
        jQuery.expr[':'].contains = function (a, i, m) {
            return $(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
        };

        // jQuery always starts with a dollar sign
        // will wait for this document to be done loading then run this code
        $(document).ready(function () {

            // tells jQuery we want this id (in other words-document.getElementById('tagInput'))
            $('#tagInput').focus(function () {
                // show tag cloud when input is focused - 300 makes it take 300ms to show completely
                $('.tagcloud').show(300);
            });

            // grabs everything inside of the form that's not the tagInput - * grabs everything in the element its next to
            $('form *:not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            });

            // search tag cloud - keyup makes it run whenever a key is released
            $('#tagInput').keyup(function () {
                // clear all disabledTag classes
                $('.disabledTag').each(function () {
                    $(this).removeClass('disabledTag');
                });

                // "this" refers to the tagInput
                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();

                // targets all tags (all a tags inside tagcloud class)
                $('.tagcloud > a:not( :contains(' + searchString + ') )').hide();
                $('.tagcloud > a:contains(' + searchString + ')').show();

                // foreach tag in inputTags
                inputTags.forEach(tag => {
                    if (tag.trim() == '') {
                        return;
                    }

                    // gonna search for
                    let containingTag = $('.tagcloud > a:contains(' + tag.trim() + ')');

                    if (containingTag.text().trim().toLowerCase() == tag.trim().toLowerCase()) {

                        containingTag.addClass('disabledTag');

                    }
                });

            });

        });
    </script>
}
